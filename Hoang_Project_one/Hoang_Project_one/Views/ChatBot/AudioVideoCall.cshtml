
@*<!doctype html>
<html>
<head>*@

    @*<script src="https://www.gstatic.com/firebasejs/5.0.4/firebase.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">*@
    @*<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">*@

    @*<style type="text/css">
        video {
            background-color: #ddd;
            border-radius: 7px;
            margin: 10px 0px 0px 10px;
            width: 1000px;
            height: 240px;
        }

        button {
            margin: 5px 0px 0px 10px !important;
            width: 654px;
        }
    </style>*@


@*</head>*@


@*<body onload="showMyFace()">*@
    <div class="container"  onload="showMyFace()">
     
            <div class="modal-dialog">

                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">

                        <video id="yourVideo" autoplay muted></video>


                        <video id="friendsVideo" autoplay></video>


                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>

            </div>
        @*</div>*@

    </div>

  

    <!--<br />-->


    @*<button onclick="showFriendsFace()" type="button" class="btn btn-primary btn-lg"><span class="glyphicon glyphicon-facetime-video" aria-hidden="true"></span> Call</button>*@


    @*<script type="text/javascript">


        var config = {


            apiKey: " <API_KEY>",


            authDomain: " <PROJECT_ID>.firebaseapp.com",


            databaseURL: " https://<DATABASE_NAME>.firebaseio.com",


            projectId: " <PROJECT_ID>",


            storageBucket: " <BUCKET>.appspot.com",


            messagingSenderId: " <SENDER_ID>"


        };
        firebase.initializeApp(config);
        var database = firebase.database().ref();
        var yourVideo = document.getElementById("yourVideo");
        var friendsVideo = document.getElementById("friendsVideo");
        var yourId = Math.floor(Math.random() * 1000000000);
        var servers = { 'iceServers': [{ 'urls': 'stun:stun.services.mozilla.com' }, { 'urls': 'stun:stun.l.google.com:19302' }, { 'urls': 'turn:numb.viagenie.ca', 'credential': 'webrtc', 'username': 'websitebeaver@mail.com' }] };
        var pc = new RTCPeerConnection(servers);
        pc.onicecandidate = (event => event.candidate ? sendMessage(yourId, JSON.stringify({ 'ice': event.candidate })) : console.log("Sent All Ice"));
        pc.onaddstream = (event => friendsVideo.srcObject = event.stream);
        function sendMessage(senderId, data) {
            console.log(senderId);
            var msg = database.push({ sender: senderId, message: data });
            msg.remove();
        }
        function readMessage(data) {
            var msg = JSON.parse(data.val().message);
            console.log(msg);
            var sender = data.val().sender;
            if (sender != yourId) {
                if (msg.ice != undefined) {
                    pc.addIceCandidate(new RTCIceCandidate(msg.ice));
                }
                else if (msg.sdp.type == "offer") {
                    var r = confirm("Answer call?");
                    if (r == true) {
                        pc.setRemoteDescription(new RTCSessionDescription(msg.sdp))
                            .then(() => pc.createAnswer())
                            .then(answer => pc.setLocalDescription(answer))
                            .then(() => sendMessage(yourId, JSON.stringify({ 'sdp': pc.localDescription })));
                    } else {
                        alert("Rejected the call");
                    }
                }
                else if (msg.sdp.type == "answer") {
                    pc.setRemoteDescription(new RTCSessionDescription(msg.sdp));
                }
            }
        };
        database.on('child_added', readMessage);
        function showMyFace() {
            navigator.mediaDevices.getUserMedia({ audio: true, video: true })
                .then(stream => yourVideo.srcObject = stream)
                .then(stream => pc.addStream(stream));
        }
        function showFriendsFace() {
            pc.createOffer()
                .then(offer => pc.setLocalDescription(offer))
                .then(() => sendMessage(yourId, JSON.stringify({ 'sdp': pc.localDescription })));
        }
    </script>*@

@*</body>

</html>*@
